#!/usr/bin/env tclsh

package require Tcl 8.5
package require Tk  8.5



# Set globals
    set sbVar       "Status: idle"
    set sizeVar     "Size: N/A"
    set stateVar    "stopped"
    set checkFile    ""
    set checkFile   ""
    set checkTime   500
    set reloadTime  5000
    set filterSize  0




proc listMovies {} {
    set movieList {}

    set processes [open "|pgrep -f flash" r]
    while {![eof $processes]} {
        set pID [gets $processes]
        if {$pID != ""} {
            if { [ file readable "/proc/$pID/fd/" ] } {
                foreach fd [glob "/proc/$pID/fd/*"] {
                    if {[string first "/tmp/Flash" [file link $fd]] == 0} {
                        lappend movieList $fd;
                    }
                }
            }
        }
    }

    close $processes
    return $movieList
}


proc lbMove {lb dir} {
    set sel [.m.ml curselection]

    if {$sel == "" || ($sel == 0 && $dir == -1)} {
        set sel 0
    } elseif {$dir == 1 && $sel == [expr [$lb index end]-1]} {
    } else {
        incr sel $dir
    }

    $lb selection clear 0 end
    $lb activate $sel
    $lb selection set $sel

    selectAction $lb
}


proc getMovie {lb} {
    set out [ $lb curselection ]

    if {$out != ""} {
        set out [ $lb get $out ]
    }

    return $out
}


proc reloadMovieListBox {lb} {
    global checkFile

    $lb delete 0 end

    set movieList [filterList [listMovies]]
    $lb insert 0 {*}$movieList

    if {$checkFile != ""} {
        set index 0
        foreach item [$lb get 0 end] {
            if {$checkFile == $item} {
                $lb activate $index;
                $lb selection set $index;
                break
            }

            incr index
        }
    }
}


proc filterList {movies} {
    global filterSize
    set filteredList [list]

    foreach movie $movies {
        if {[file exists $movie] && [file size $movie] >= $filterSize} {
            lappend filteredList $movie
        }
    }

    return $filteredList
}


proc setFilter {content lb} {
    global filterSize sbVar

    if {[string is double $content]} {
        set filterSize [expr int(1024*1024*double($content))]
        reloadMovieListBox $lb
        set sbVar "Filter set to $content MB"
    } else {
        set sbVar "Error: given filter is not a decimal..."
    }
}


proc selectAction {lb} {
    global checkFile

    set checkFile [getMovie $lb]
    set sbVar "Selected movie: $checkFile"
}


# TODO:
# Use after (3 sec) in selectAction, to call this function. If selectAction is
# called within the 3 seconds, cancel the after call and start a new one, in
# order to reduce the number of calls to ffmpeg. A cached photo is a better
# option, in a future version.
# Move the create image call to an other part (like the init part), and use
# this function to change the data in the image and update.
proc showPhoto {can} {
    global checkFile

    set thumbnail [open "|ffmpeg -i $checkFile -vframes 1 -s 133x100 -ss 15 -pix_fmt rgb24 -f gif -"]
    image create photo thumb -data $thumbnail -height 100 -width 133
    $can create image 1 1 -image thumb -anchor nw
}


proc autoReload {lb} {
    global reloadTime

    reloadMovieListBox $lb

    after $reloadTime "autoReload $lb"
}


proc playMovie {fn} {
    global sbVar

    set sbVar "Started movie: $fn"
    exec -ignorestderr mplayer $fn &
}


proc downloadMovie {fn} {
    global sbVar

    set sbVar "Status: copying movie"

    set fail [
        catch {
            set movie [open $fn r]
            set saveAs [open [tk_getSaveFile -filetypes {{"FLV movie" {.flv}}}] w]

            fconfigure $movie -translation binary
            fconfigure $saveAs -translation binary
            fcopy $movie $saveAs; # 'cuz `file copy` only copies the link
        }
    ]

    if {$fail} {
        set sbVar "Status: movie not copied"
    } else {
        set sbVar "Status: movie copied"
    }
}


proc checkFileSize {} {
    global sizeVar sbVar checkTime checkFile

    if {[file exists $checkFile]} {
        set fail [
            catch {
                set sizeVar [format "Size: %04.2f MB" [expr [file size $checkFile] / (1024. * 1024.)]]
            } returnValue
        ]
        update

        if {$fail} {
            set sbVar "Status: error while checking size..."
        }
    }

    # Always check.
    after $checkTime checkFileSize
}


wm title . "Chromovie"


# Create widgets
    frame       .m
    listbox     .m.ml       -selectmode single

    frame       .m.i

    frame       .m.i.ff
    entry       .m.i.ff.e
    button      .m.i.ff.b   -text "Filter"       -command {setFilter [.m.i.ff.e get] .m.ml}

    canvas      .m.i.c      -bg white -height 100 -width 133

    frame       .b
    button      .b.play     -text "Play"         -command {playMovie [getMovie .m.ml]}
    button      .b.reload   -text "Reload list"  -command {reloadMovieListBox .m.ml}
    button      .b.download -text "Download"     -command {downloadMovie [getMovie .m.ml]}

    frame       .s
    label       .s.status   -textvariable sbVar   -justify left -bg grey
    label       .s.size     -textvariable sizeVar -justify right



# Set bindings
    bind .m.ml <<ListboxSelect>>        { selectAction .m.ml }
    bind .m.ml <Double-ButtonPress-1>   { set sbVar "double clicked listbox (to be implemented)" }
    bind .m.ml <Return>                 { playMovie [getMovie .m.ml] }
    bind .m.ml <k>                      { lbMove .m.ml -1 }
    bind .m.ml <j>                      { lbMove .m.ml 1 }
    bind .m.i.ff.e <Return>             { .m.i.ff.b invoke }
    bind . <Control-q>                  { exit 0 }



# Pack widgets
    pack .s                 -side bottom    -fill x                 -anchor s
    pack .s.status          -side left      -fill x     -expand 1   -anchor w
    pack .s.size            -side right     -fill x                 -anchor e

    pack .b                 -side top                               -anchor nw
    pack .b.play \
         .b.download \
         .b.reload          -side left

    pack .m                 -side top       -fill both  -expand 1
    pack .m.ml              -side left      -fill both  -expand 1   -anchor n

    pack .m.i               -side right     -fill y
    pack .m.i.ff            -side top
    pack .m.i.ff.e          -side left
    pack .m.i.ff.b          -side right

    pack .m.i.c             -side top



# Execute initial tasks
    autoReload .m.ml
    checkFileSize
    lbMove .m.ml 0
    focus .m.ml

