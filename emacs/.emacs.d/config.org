* Introduction
** Why org mode
   Self documenting configuration, yay!

   As far as I know, Emacs 24.0 and up supports org-mode out of the
   box. Org-mode is great to organize stuff in plain text.

   With just a few lines of elisp in the [[../.emacs][.emacs]] file, we can extract
   the elisp code from this org-mode file (also known as tangling),
   compile and execute it. The next time Emacs is opened, it detects
   the config.elc file and tries to load it, but only if it's newer
   than the config.org file. So, org makes it easy to document the
   configuration file, while still keeping it fast to load.
* Package Configuration
  Packages should be installed and loaded in a modular and reliable
  way... Enter /use-package/! It allows for easy package loading and
  configuration!
  #+begin_src emacs-lisp :tangle yes
    (eval-and-compile
      (require 'package)

      (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                               ("melpa" . "https://melpa.org/packages/")))
      (package-initialize)

      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

      (require 'use-package))

      (eval-when-compile
        (unless (boundp 'package-archive-content)

    (when (y-or-n-p "Update package list?")
      (package-refresh-contents))))
  #+end_src
  =package-initialize= is executed in a =eval-and-compile= block to
  ensure that it is loaded properly compile time. Also add a general
  elisp directory to our path, in order to experiment!
  #+begin_src emacs-lisp :tangle yes
    (eval-and-compile (add-to-list 'load-path "~/.emacs.d/elisp/"))
  #+end_src
* Auto-Compile
  Auto compile everything on load, in order to speed up future loads.
  #+begin_src emacs-lisp :tangle yes
    (use-package auto-compile
      :ensure t
      :config
      (progn
        (auto-compile-on-load-mode)
        (setq load-prefer-newer t)))
  #+end_src
* General Configuration
** Emacs Server
   I use emacsclient to edit files from the terminal. However, the
   server must be running before emacsclient can be used:
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'after-init-hook 'server-start)
   #+end_src
** Visual Appearance
   Now that we have the packages configured, we want to clean up the
   visual appearances of emacs. Lets cut down on the bars and what
   not.
   #+begin_src emacs-lisp :tangle yes
     (setq inhibit-splash-screen t)          ; Disable splash screen
     (setq inhibit-startup-message t)        ; Disable startup message

     (when window-system
       (scroll-bar-mode -1)                  ; Disable scroll bars
       (tool-bar-mode -1)                    ; Disable tool bar
       (menu-bar-mode -1))                   ; Disable menu bar

     (column-number-mode 1)                  ; Add column number to mode-line
     (setq use-dialog-box nil)               ; Do not use dialog boxes
     (global-hl-line-mode 1)                 ; Highlight line of the cursor
     (setq echo-keystrokes 0.1)              ; Lower the time to show keystrokes

     (use-package hl-line
       :config
       (set-face-background                  ; Set the color of the
        hl-line-face "gray16"))              ; highlight bar
   #+end_src
** Fonts
   Set Fira Code as default font, if possible.

   #+begin_src emacs-lisp :tangle yes
     (defvar my-prefered-font-family "Fira Code")

     (if (member my-prefered-font-family (font-family-list))
         (set-face-attribute 'default nil :family my-prefered-font-family)
       (set-face-attribute 'default nil :family "Mono"))

     (set-face-attribute 'variable-pitch nil :family "Sans Serif")
   #+end_src
** Window Management
   Use windmove to navigate windows. Enable default keybindings (shift + arrow keys) to move between windows.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package windmove
       :init (windmove-default-keybindings))
   #+END_SRC

   When splitting windows, switch to other buffer, since that's always more interesting than a clone of the current buffer.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun switch-next-window-to-other-buffer (&rest r)
        (set-window-buffer (next-window) (other-buffer)))

     (advice-add
      #'split-window-right
      :after #'switch-next-window-to-other-buffer)

     (advice-add
      #'split-window-below
      :after #'switch-next-window-to-other-buffer)
   #+END_SRC
** Line numbers
   #+begin_src emacs-lisp :tangle yes
     (use-package display-line-numbers
       :if (version<= "26.0.50" emacs-version)
       :hook ((prog-mode yaml-mode) . display-line-numbers-mode))

     (use-package linum
       :if (version<= emacs-version "26.0.50")
       :hook ((prog-mode yaml-mode) . global-linum-mode))
   #+end_src
** Key bindings
   Some simple key bindings, to make life easier. These should be
   self-explanatory.
   #+begin_src emacs-lisp :tangle yes
     (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
     (global-set-key (kbd "C--") 'text-scale-decrease)
     (global-set-key (kbd "C-+") 'text-scale-increase)
     (global-set-key (kbd "RET") 'newline-and-indent)
     (global-set-key (kbd "M-[") 'align)
   #+end_src
** Transpose
   Transpose symbols instead of words with M-t
   #+begin_src emacs-lisp :tangle yes
     (use-package simple
       :bind ("M-t" . transpose-symbols)
       :init (defun transpose-symbols (arg)
               (interactive "*p")
               (transpose-subr 'forward-symbol arg)))

   #+end_src
** Increment numbers
   Got this script from the [[http://www.emacswiki.org/emacs/IncrementNumber][emacswiki]]. It increments (or decrements) a
   number under point. This function is bound to =C-c i=.
   #+begin_src emacs-lisp :tangle yes
     (defun my/increment-number-decimal (&optional arg)
       "Increment the number forward from point by 'arg'."
       (interactive "p*")
       (save-excursion
         (save-match-data
           (let (inc-by field-width answer)
             (setq inc-by (if arg arg 1))
             (skip-chars-backward "0123456789")
             (when (re-search-forward "[0-9]+" nil t)
               (setq field-width (- (match-end 0) (match-beginning 0)))
               (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
               (when (< answer 0)
                 (setq answer (+ (expt 10 field-width) answer)))
               (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                      answer)))))))

     (global-set-key (kbd "C-c i") 'my/increment-number-decimal)
   #+end_src
** Configure yes-or-no-p
   Disable annoying /enter yes or no/ questions and replace them
   with a simple /enter y or n/ question.
   #+begin_src emacs-lisp :tangle yes
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Exit question
   I don't like it when I hit C-x C-c on accident and I'm thrown out
   of Emacs. Emacs should always ask me whether I want to exit or not!
   #+begin_src emacs-lisp :tangle yes
     (setq confirm-kill-emacs 'yes-or-no-p)
   #+end_src
** Electric pairs
   Electric pair mode rocks for most modes, so its on by default. It
   automatically closes an opening bracket or quote. When a piece of
   text is selected, it will wrap the text in the given pair. This
   makes many programming tasks a joy!
   #+begin_src emacs-lisp :tangle yes
     (electric-pair-mode t)
     (show-paren-mode t)
     (defvar electric-pair-preserve-balance t)
     (defvar electric-pair-delete-adjacent-pairs t)
   #+end_src
** White spaces
   Here I configure my whitespace settings. I currently use softtabs
   consisting of 4 spaces. Line wrapping is turned of, since I find it
   confusing.
   #+begin_src emacs-lisp :tangle yes
     (use-package whitespace
       :diminish global-whitespace-mode
       :hook (((prog-mode text-mode) . whitespace-mode))
       :config
       (setq whitespace-style '(face trailing tabs)))

     (setq-default indent-tabs-mode nil)     ; Disable tab
     (setq tab-width 4)                      ; Set tab width to 4 spaces
   #+end_src
** Fill column
   Text should stay within 80 columns. This should be true for both
   text documents, as well as comments in source code.
   #+begin_src emacs-lisp :tangle yes
     (dolist (hook '(text-mode-hook prog-mode-hook))
       (add-hook hook 'auto-fill-mode))
     (setq fill-column 80)
     (setq fill-indent-according-to-mode t)
   #+end_src
   #+begin_src emacs-lisp :tangle yes
     (use-package newcomment
       :custom (comment-auto-fill-only-comments t))
   #+end_src
** Ediff Configuration
   #+begin_src emacs-lisp :tangle yes
     (defvar ediff-window-setup-function 'ediff-setup-windows-plain)
   #+end_src
** Browser Configuration
   Set the default browser to firefox.
   #+begin_src emacs-lisp :tangle yes
     (setq browse-url-browser-function 'browse-url-generic)
     (defvar browse-url-generic-program "firefox")
   #+end_src
** Spell Checker Configuration
   Enable =flyspell-mode= for normal text files.
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'text-mode-hook 'flyspell-mode)
   #+end_src
   And enable the spell checker for comments, while programming.
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'prog-mode-hook 'flyspell-prog-mode)
   #+end_src
** Backups
   Save up to 6 new versions and two old versions in a dedicated
   backup directory. Better safe than sorry.
   #+begin_src emacs-lisp :tangle yes
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
     (setq version-control t)           ; Save versions of our backup files
     (setq delete-old-versions t)       ; Do not ask me whether I want to
                                        ; delete old backups
     (setq vc-make-backup-files t)      ; Prevent loss of contents in
                                        ; uncommitted files
     (setq kept-new-versions 6)
     (setq kept-old-versions 2)
   #+end_src
** History
   Keep the history of our actions. I have set the maximum number of
   history entries to 1000.
   #+begin_src emacs-lisp :tangle yes
     (savehist-mode 1)
     (setq history-length 1000)
     (setq history-delete-duplicates t)
     (defvar savehist-save-minibuffer-history t)
     (defvar savehist-additional-variables '(compile-command
                                             killring
                                             search-ring
                                             regexp-search-ring))
   #+end_src
** Diminish and Delight
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package diminish
       :ensure t)

     (use-package delight
       :ensure t)
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package dashboard
       :ensure t
       :custom ((dashboard-center-content t)
                (dashboard-items '((recents . 10)
                                   (projects . 10))))
       :config (dashboard-setup-startup-hook))
   #+END_SRC
** Highlight indentation
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package highlight-indentation
       :ensure t
       :custom-face (highlight-indentation-current-column-face ((t (:background "pink4"))))
       :hook ((yaml-mode python-mode) . highlight-indentation-current-column-mode))
   #+END_SRC
** Projectile
   Easy project management with =C-c p= as prefix.
   #+begin_src emacs-lisp :tangle yes
     (use-package projectile
       :ensure t
       :diminish projectile-mode
       :init (projectile-mode))
   #+end_src
** Hydra
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package hydra
       :commands (hydra-default-pre
                  hydra-keyboard-quit
                  hydra--call-interactively-remap-maybe
                  hydra-show-hint
                  hydra-set-transient-map)
       :ensure t)
   #+END_SRC
** Helm Mode
   Using Helm for most completion tasks. It replaces Ido and Smex.
   #+begin_src emacs-lisp :tangle yes
     (use-package helm
       :ensure t
       :diminish helm-mode
       :bind (("C-x a"   . helm-apt)
              ("C-x C-b" . helm-buffers-list)))
   #+end_src
*** Helm Flycheck
    #+begin_src emacs-lisp :tangle yes
      (use-package helm-flycheck
                   :ensure t
                   :bind ("C-c ! h" . helm-flycheck))
    #+end_src
*** Helm Yasnippet
    #+begin_src emacs-lisp :tangle yes
      (use-package helm-c-yasnippet
        :bind (("C-c y c" . helm-yas-complete))
        :ensure t)
    #+end_src
*** Helm Tramp
    #+begin_src emacs-lisp :tangle yes
      (use-package helm-tramp
        :ensure t
        :bind ("C-x t" . helm-tramp))
    #+end_src
** Ivy Mode
   Gradually replacing my helm config with ivy, where useful!
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ivy
       :ensure t
       :diminish ivy-mode
       :custom ((ivy-initial-inputs-alist nil))
       :bind (("C-s" . swiper)
              ("C-x C-f" . counsel-find-file)
              ("C-x c" . counsel-colors-emacs)
              ("C-x b" . counsel-switch-buffer)
              ("M-x" . counsel-M-x))
       :init (ivy-mode 1))

     (use-package all-the-icons-ivy
       :ensure t
       :config (all-the-icons-ivy-setup))

     (use-package ivy-hydra
       :ensure t
       :after hydra)

     (use-package ivy-rich
       :ensure t
       :init (ivy-rich-mode 1))
   #+END_SRC
*** Counsel plugins
**** Projectile
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package counsel-projectile
         :ensure t
         :bind (("C-c C-p" . hydra-counsel-projectile/body)
                ("C-c p" . hydra-counsel-projectile/body))
         :custom (counsel-ag-base-command "ag --ignore-case --nocolor --nogroup %s")
         :init (defhydra hydra-counsel-projectile (:color blue) "Projectile"
                 ("p" counsel-projectile-switch-project "switch project")
                 ("f" counsel-projectile-find-file-dwim "find file")
                 ("g" counsel-projectile-ag "grep source")
                 ("q" keyboard-quit "quit")))
     #+END_SRC
** Wgrep
   Apply changes to grep buffer!
   #+begin_src emacs-lisp :tangle yes
     (use-package wgrep
       :ensure t)
   #+end_src
** Dired and Dired-x Configuration
   Some basic config for dired and dired-x.
   #+begin_src emacs-lisp :tangle yes
     (use-package dired-x
       :commands dired-omit-mode
       :hook (dired-mode . dired-omit-mode))

     (use-package dired
       :config
       (progn
         (put 'dired-find-alternate-file 'disabled nil)
         (setq dired-dwim-target t)))

     (use-package dired-rainbow
       :ensure t
       :config
       (progn
         (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
         (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
         (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
         (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx" "org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
         (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
         (dired-rainbow-define media "#ff4500" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac" "tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
         (dired-rainbow-define log "#8b0000" ("log"))
         (dired-rainbow-define shell "#2f4f4f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
         (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
         (dired-rainbow-define compiled "#6c7b8b" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" "java" "exe" "msi"))
         (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
         (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
         (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
         (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
         (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
         (dired-rainbow-define vc "#0074d9" (".git" ".gitignore" ".gitattributes" ".gitmodules"))
         (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")))
   #+end_src

** EditorConfig
   Editor config helps to configure your editor, independent of the
   exact editor you use. This is used for projects where developers
   choose their own editor, but want consistent settings for the
   projects they collaborate on.
   #+begin_src emacs-lisp :tangle yes
     (use-package editorconfig
       :ensure t
       :diminish (editorconfig-mode)
       :config (editorconfig-mode 1))
   #+end_src
* Theme Configuration
** Themes
*** Zenburn
   Zenburn! Gotta love it..
   #+begin_src emacs-lisp :tangle yes
     (use-package zenburn-theme
       :ensure t)
   #+end_src
*** Doom themes
    Has a lot of good themes!
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package doom-themes
        :ensure t)

      (use-package doom-modeline
        :ensure t)
    #+END_SRC
** Select theme
   #+begin_src emacs-lisp :tangle yes
     (load-theme 'zenburn t)
   #+end_src
* Languages Modes
  Here you will find the configuration for some of the languages I
  use. The configurations for each language can be found under its own
  header.

  There are some general modes that should be active for a few or all
  languages. Subword mode lets me navigate over subwords in camelcase
  and snakecase. Which function shows the function I'm in on the
  bottom of the screen, which is very useful while navigating large
  code bases!
  #+begin_src emacs-lisp :tangle yes
    (use-package subword
      :hook ((java-mode python-mode) . subword-mode))

    (use-package which-func
      :hook ((prog-mode) . which-function-mode))
  #+end_src
** LSP-mode
   #+begin_src emacs-lisp :tangle yes
     (use-package lsp-mode
       :ensure t
       :bind (:map lsp-mode-map
                   ("C-c l" . lsp-command-map)))
   #+end_src
** Shell scripts
   #+begin_src emacs-lisp :tangle yes
     (use-package sh-script
       :custom ((sh-basic-offset 2)
                (sh-guess-basic-offset t)))
   #+end_src
** Sed
   #+begin_src emacs-lisp :tangle yes
     (use-package sed-mode
       :ensure t)
   #+end_src
** Go
   #+begin_src emacs-lisp :tangle yes
     (use-package go-mode
       :ensure t
       :custom ((whitespace-style '(face trailing))
                (tab-width 2)))
   #+end_src
** Java
   All configuration regarding Java goes here.
*** General Configuration
    Put our buffer in subword mode when Java is loaded. Subword mode
    allows us to edit CamelCase identifiers easily.
    #+begin_src emacs-lisp :tangle yes
      (add-hook 'java-mode-hook 'subword-mode)
    #+end_src
*** Groovy
    #+begin_src emacs-lisp :tangle yes
      (use-package groovy-mode
        :ensure t
        :mode ("\.groovy$")
        :custom (groovy-indent-offset 2))
    #+end_src
*** Gradle Configuration
    #+begin_src emacs-lisp :tangle yes
      (use-package gradle-mode
        :mode  "\.gradle$"
        :ensure t)
    #+end_src
*** Ant Configuration
    Ant mode makes it easier to call ant from Emacs.
    #+begin_src emacs-lisp :tangle yes
      (use-package ant
        :ensure t)
    #+end_src
** Lisps
*** General
**** Paredit
     Configure paredit mode for all the lisp dialects. This is a must
     for lisp development of any kind.
     #+begin_src emacs-lisp :tangle yes
       (use-package paredit
         :ensure t
         :hook ((emacs-lisp-mode
                 eval-expression-minibuffer-setup
                 ielm-mode
                 lisp-mode
                 clojure-mode
                 lisp-interaction-mode
                 scheme-mode) . enable-paredit-mode))
     #+end_src
*** TODO Emacs Lisp
*** Clojure
    Make sure that Cider is installed, for interactive clojure development.
    #+begin_src emacs-lisp :tangle yes
      (use-package cider
        :ensure t
        :defer t)
    #+end_src
*** TODO Common Lisp
*** Schemes
    Make sure that Geiser is installed, for interactive scheme development.
    #+begin_src emacs-lisp :tangle yes
      (use-package geiser
        :ensure t
        :defer t)
    #+end_src
** Python
*** Elpy
    I'm using elpy for my python IDE needs. Elpy uses =rope= and
    =jedi= for completion, =pyflakes= for checking stuff and
    =importmagic= for automatic imports. These can be installed with
    =pip3 install rope jedi pyflakes importmagic=.
    #+begin_src emacs-lisp :tangle yes
      (use-package elpy
        :ensure t
        :defer t
        :custom ((elpy-rpc-python-command "python3"))
        :init (elpy-enable))
    #+end_src
*** Pyvenv
    Useful for working with virtual environments.
    #+begin_src emacs-lisp :tangle yes
      (use-package pyvenv
        :ensure t)
    #+end_src
*** Autopep8
    Reformat python files according to PEP8 on save. For this to work, install autopep8 with pip.
    #+begin_src emacs-lisp :tangle yes
      (use-package py-autopep8
        :ensure t
        :hook (elpy-mode-hook . py-autopep8-enable-on-save))
    #+end_src
*** Python (pyright)
    Install pyright using:
    #+begin_src sh :results silent :session none
      sudo snap install node
      sudo npm install -g pyright
    #+end_src
    #+begin_src emacs-lisp :tangle yes
      (use-package lsp-pyright
        :ensure t
        :requires (lsp-mode))
    #+end_src
** Jinja2
   #+begin_src emacs-lisp :tangle yes
     (use-package jinja2-mode
       :ensure t
       :mode ("\.j2$" . jinja2-mode))
   #+end_src
** C/C++
   Activate the =xcscope= package, to easily navigate C/C++ code.
   #+begin_src emacs-lisp :tangle yes
     (use-package xcscope
       :ensure t
       :defer t
       :init (cscope-setup))
   #+end_src
* Configuration Modes
** Nginx Mode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package nginx-mode
       :ensure t
       :custom ((nginx-indent-level 2)))
   #+END_SRC
* Markup and Data File Modes
** Markdown
   Make sure markdown mode is there, if needed.
   #+begin_src emacs-lisp :tangle yes
     (use-package markdown-mode
       :ensure t)
   #+end_src
** Org Mode
     Must have! Make sure org-mode is installed, up-to-date and configured to my needs.
   #+begin_src emacs-lisp :tangle yes
     ;; (defun my-org-hook ()
     ;;   (variable-pitch-mode 1)
     ;;   (mapc
     ;;    (lambda (face) ;; Rescale and inherit the properties from the fixed-pitch font.
     ;;      (set-face-attribute face nil :inherit 'fixed-pitch))
     ;;    (list 'org-code 'org-link 'org-block 'org-table 'org-property-value 'org-formula
     ;;          'org-tag 'org-verbatim 'org-date 'company-tooltip 'org-indent
     ;;          'org-special-keyword 'org-block-begin-line 'org-todo 'org-done
     ;;          'org-block-end-line 'org-meta-line
     ;;          'org-document-info-keyword)))

     (custom-theme-set-faces
      'user
      '(org-code ((t (:inherit (fixed-pitch)))))
      '(org-code-begin-line ((t (:inherit (font-lock-comment-face fixed-pitch)) t)))
      '(org-code ((t (:inherit (shadow fixed-pitch)))))
      '(org-code ((t (:inherit (shadow fixed-pitch)) t))))

     (use-package org
       :ensure org-plus-contrib
       :pin gnu
       :bind (("C-c c" . org-capture)
              ("<F11>" . org-tree-slide-mode))
       :custom ((org-babel-python-command "python3")
                (org-export-backends '(ascii pandoc html man md odt texinfo confluence groff))
                (org-ellipsis " ⏷")
                (org-image-actual-width nil)
                (org-hide-emphasis-markers t))
       ;; :hook (org-mode . my-org-hook)
       :custom-face
       (org-code-begin-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
       (org-ellipsis ((t (:underline nil))))

       :commands org-babel-do-load-languages
       :config
       (setq org-directory "~/org"
             org-default-notes-file (concat org-directory "/notes.org")
             org-agenda-files '("~/org/"))
       (defvar org-capture-templates '(("t" "TODO"
                                        entry (file+headline
                                               "~/org/todo.org"
                                               "Tasks")
                                        "* TODO %?\n  %i %F")))
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((dot        . t)
          (ditaa      . t)
          (plantuml   . t)
          (python     . t)
          (R          . t)
          (tmux       . t)
          (restclient . t)
          (sql        . t)
          (sqlite     . t)
          (latex      . t)
          (makefile   . t)
          (shell      . t))))
   #+end_src

*** Org Export Libraries
   #+begin_src emacs-lisp :tangle yes
     (use-package ox-reveal
       :ensure t)

     (use-package ox-pandoc
       :ensure t)

     ;;; Ensure beamer exporter is loaded
     (use-package ox-beamer)
   #+end_src

*** Org tree slide
   #+begin_src emacs-lisp :tangle yes
     ;; (use-package org-tree-slide
     ;;   :ensure t
     ;;   :defer t)
   #+end_src

*** Org Babel Libraries
    #+begin_src emacs-lisp :tangle yes
      (use-package ob-tmux
        :ensure t)
    #+end_src

    #+begin_src emacs-lisp :tangle yes
      (use-package ob-restclient
        :ensure t)
    #+end_src

*** Org Bullets
    #+begin_src emacs-lisp :tangle yes
      (use-package org-bullets
        :ensure t
        :hook (org-mode . org-bullets-mode))
    #+end_src
** CSV
   #+begin_src emacs-lisp :tangle yes
     (use-package csv-mode
       :ensure t)
   #+END_SRC
** JSON
   #+begin_src emacs-lisp :tangle yes
     (use-package json-mode
       :ensure t)
   #+END_SRC
** Yaml
   Add yaml mode, for use in all yaml related project (ansible,
   docker-compose, etc).
   #+begin_src emacs-lisp :tangle yes
     (use-package yaml-mode
       :ensure t)
   #+END_SRC
** Latex
   Make sure =auctex= is installed, for Latex development. (=tex-site=
   seems to be the package for =auctex=)
   #+begin_src emacs-lisp :tangle yes
     (use-package tex-site
       :ensure auctex)
   #+end_src
** Graphviz
   Ensure graphviz dot mode is installed, for creating graphviz diagrams.
   #+begin_src emacs-lisp :tangle yes
     (use-package graphviz-dot-mode
       :ensure t)
   #+end_src
** Plantuml
   Ensure plantuml mode is installed.
   #+begin_src emacs-lisp :tangle yes
     (use-package plantuml-mode
       :ensure t)
   #+end_src
* Framework Modes
  Configuration for frameworks, such as docker, ansible, etc. is done
  here.
** Docker
*** Docker
    Enable Docker management through emacs.
    #+begin_src emacs-lisp :tangle yes
      (use-package docker
        :ensure t)
    #+end_src
*** Dockerfiles
    Enable highlighting for Dockerfiles.
    #+begin_src emacs-lisp :tangle yes
      (use-package dockerfile-mode
        :ensure t)

      (use-package docker-compose-mode
        :ensure t)
    #+end_src
** Kubernetes
    #+begin_src emacs-lisp :tangle yes
      (use-package k8s-mode
        :ensure t)
    #+end_src
** Terraform
   Enable terraform mode!
   #+begin_src emacs-lisp :tangle yes
     (use-package terraform-mode
       :ensure t)
   #+end_src
* Web Development Related
** Web-mode
   Added web-mode to be able to edit javascript with Javascript major
   mode in a HTML file. Works out of the box.
   #+begin_src emacs-lisp :tangle yes
     (use-package web-mode
       :ensure t
       :custom (web-mode-markup-indent-offset 2)
       :mode "\.html?$")
   #+end_src
* Multimedia
** EMMS
   Future proof media center!

   Config disabled for now, since there is a bug in the current version (20210911.2031), causing infinite recursion during startup. Will enable it again when this bug is fixed.

  #+begin_src emacs-lisp :tangle yes
    (use-package emms
      :ensure t
      :init
      (emms-minimalistic)
      (emms-default-players))
  #+end_src
** Pulseaudio control
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package pulseaudio-control
       :ensure t
       :bind (("C-x /" . hydra-counsel-pulseaudio/body))
       :init (defhydra hydra-counsel-pulseaudio (:color pink) "PulseAudio"
               ("s" pulseaudio-control-select-sink-by-name "select sink")
               ("u" pulseaudio-control-increase-volume "volume up")
               ("d" pulseaudio-control-decrease-volume "volume down")
               ("m" pulseaudio-control-toggle-current-sink-mute "mute")
               ("q" keyboard-quit "quit" :color blue)))
   #+END_SRC
* Rainbows
** Rainbow Delimiters
   #+begin_src emacs-lisp :tangle yes
     (use-package rainbow-delimiters
       :ensure t
       :hook ((text-mode prog-mode) . rainbow-delimiters-mode))
   #+end_src
** Rainbow Blocks
   #+begin_src emacs-lisp :tangle yes
     (use-package rainbow-blocks
       :ensure t
       :hook (python-mode . rainbow-blocks-mode))
   #+end_src
** Rainbow Mode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package rainbow-mode
       :ensure t
       :hook (prog-mode . rainbow-mode))
   #+END_SRC
* Other Modes
** Fill Column Indicator
   #+begin_src emacs-lisp :tangle yes
     (use-package fill-column-indicator
       :ensure t
       :hook   ((text-mode prog-mode) . fci-mode)
       :custom ((fci-rule-column 100)
                (fci-rule-width  1)))
   #+end_src
** Password Mode
   Awesome mode for hiding passwords where necessary. Needs some
   tweaking, depending on the type of file. Prefixes can be easily set
   in a .dir-locals.el file.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package password-mode
       :ensure t)
   #+END_SRC
** Password Generator Mode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package password-generator
       :ensure t)
   #+END_SRC
** Expand Region
   Expand region increases the selected region by semantic units.
   #+begin_src emacs-lisp :tangle yes
     (use-package expand-region
       :ensure t
       :bind ("C-=" . er/expand-region))
   #+end_src
** Rest Client
   #+begin_src emacs-lisp :tangle yes
     (use-package restclient
       :ensure t)
   #+end_src
** Treemacs
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package treemacs
       :ensure t
       :bind ("<f6>" . treemacs))

     (use-package treemacs-projectile
       :ensure t
       :requires treemacs
       :defer t)

     (use-package treemacs-magit
       :ensure t
       :requires treemacs
       :defer t)
   #+END_SRC
** Which Key
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package which-key
       :ensure t
       :diminish which-key-mode
       :config (which-key-mode))
   #+END_SRC
** Multiple Cursor
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package multiple-cursors
       :ensure t
       :bind (("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-prev-like-this)
              ("C-c C->" . mc/mark-all-like-this)))
   #+END_SRC
** Eyebrowse
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package eyebrowse
       :ensure t
       :init (eyebrowse-mode))
   #+END_SRC
** Shackle
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package shackle
       :ensure t
       :custom (shackle-rules '(("\\*helm.*?\\*" :regexp t :align t :size 0.4)
                                ("*compilation*" :regexp nil :align t :size 0.4)
                                ("*swiper*" :align t :size 0.4)))
       :init (shackle-mode))

     (setq ivy-display-functions-alist '((ivy-completion-in-region . ivy-display-function-overlay)))
   #+END_SRC
** TODO Dired Sidebar
   Nice for tree style file navigation. Would like to add the
   vscode-icon package, for nicer icons.
   #+begin_src emacs-lisp :tangle yes
     (use-package dired-sidebar
       :ensure t
       :bind ("C-c d" . dired-sidebar-toggle-sidebar))
   #+end_src
** Flycheck Mode
   Awesome mode to automatically run syntax checkers over the source
   code in idle-time. Currently, only C and Python are configured.
   #+begin_src emacs-lisp :tangle yes
     (use-package flycheck
       :ensure t
       :commands (flycheck-mode flycheck-list-errors flycheck-select-checker)
       :config
       (progn
         (add-hook 'c-mode-hook
                   (lambda ()
                     (flycheck-mode)
                     (flycheck-list-errors)))
         (add-hook 'c++-mode-hook
                   (lambda ()
                     (flycheck-mode)
                     (flycheck-list-errors)))
         (add-hook 'js-mode-hook
                   (lambda ()
                     (flycheck-select-checker 'jshint)))
         (add-hook 'python-mode-hook
                   (lambda ()
                     (flycheck-select-checker 'python-flake8)
                     (flycheck-mode)))))
   #+end_src
** Org-Jira
   Mode to work with Jira from Emacs.
   #+begin_src emacs-lisp :tangle yes
     ;; (use-package org-jira
     ;;   :ensure t
     ;;   :bind ("C-c j c" . org-jira-create-issue))
   #+end_src
** Magit Mode
   Awesome git mode. Must have to control git from Emacs.
   #+begin_src emacs-lisp :tangle yes
     (use-package magit
       :ensure t
       :custom ((magit-last-seen-setup-instructions "1.4.0")
                (magit-auto-revert-mode nil))
       :hook ((magit-process-mode . goto-address-mode))
       :bind ("C-x g" . magit-status))
   #+end_src
** Git gutter
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package git-gutter
       :ensure t
       :hook (prog-mode . git-gutter-mode))
   #+END_SRC
** Company Mode
   Company mode provides auto completion for my setup. Company works
   out of the box. Back-ends can be configured using the
   =company-backends= list, but has a sane default.
   #+begin_src emacs-lisp :tangle yes
     (use-package company
       :ensure t
       :commands company-complete-common
       :init (global-company-mode)
       :diminish company-mode)
   #+end_src
   The tab completion functionality might clash with yasnippet. The
   following code (from [[http://www.emacswiki.org/emacs/CompanyMode]])
   resolves the issue.
   #+begin_src emacs-lisp :tangle yes
     (defun check-expansion ()
       (save-excursion
         (if (looking-at "\\_>") t
           (backward-char 1)
           (if (looking-at "\\.") t
             (backward-char 1)
             (if (looking-at "->") t nil)))))


     (defun tab-indent-or-complete ()
       (interactive)
       (if (minibufferp)
           (minibuffer-complete)
         (if (or (not yas-minor-mode)
                 (null (yas-expand)))
             (if (check-expansion)
                 (company-complete-common)
               (indent-for-tab-command)))))


     (with-eval-after-load 'company
       (define-key company-active-map "\t" 'tab-indent-or-complete))
   #+end_src
** Yasnippet Mode
   Snippets, yay!
   #+begin_src emacs-lisp :tangle yes
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :commands yas-expand yas-load-directory
       :hook ((python-mode
               emacs-lisp-mode
               org-mode
               java-mode
               go-mode
               c++-mode
               c-mode) . yas-minor-mode)
       :config
       (let ((my-snippets-dir "~/.emacs.d/snippets"))
         (setq yas-snippet-dirs (list my-snippets-dir))
         (defvar yas-root-directory my-snippets-dir)
         (yas-load-directory yas-root-directory)))
   #+end_src
   The defaults are OK, but it gets better with the snippets library
   from [[https://github.com/AndreaCrotti/yasnippet-snippets.git][Andrea Crotti]]. No need to clone them manually anymore.
   #+begin_src emacs-lisp :tangle yes
     (use-package yasnippet-snippets
       :ensure t)
   #+end_src
** CEDET
   Basic CEDET configuration.
   #+begin_src emacs-lisp :tangle yes
     (use-package cedet
       :config
       (progn
         (semantic-mode 1)
         (setq semantic-default-submodes
               '(global-semanticdb-minor-mode
                 global-semantic-idle-scheduler-mode
                 global-semantic-idle-summary-mode
                 global-semantic-idle-local-symbol-highlight-mode))))
   #+end_src
*** Sr-Speedbar
    The key binding for speedbar does not work yet. Fix this!
    #+begin_src emacs-lisp :tangle yes
      (use-package sr-speedbar
        :ensure t
        :commands (sr-speedbar-exist-p sr-speedbar-select-window)
        :bind ("<f6>" . my/sr-speedbar-toggle)
        :config
        (defun my/sr-speedbar-toggle ()
          "Toggle sr-speedbar and set focus to it."
          (interactive)
          (sr-speedbar-toggle)
          (when (sr-speedbar-exist-p)
            (sr-speedbar-select-window))))
    #+end_src
** TODO Smartpair Mode
   Could replace my electric pair config. Should be configured
   correctly.
   #+begin_src emacs-lisp :tangle yes
     (use-package smartparens
       :ensure t
       :init (smartparens-mode))
   #+end_src
** Ace-mode
   Awesome mode to jump quickly to a specific point in one of the
   visible buffers.
   #+begin_src emacs-lisp :tangle yes
     (use-package ace-jump-mode
       :ensure t
       :bind ("C-c SPC" . ace-jump-mode))
   #+end_src
** Origami mode
   #+begin_src emacs-lisp :tangle yes
     (use-package origami
       :ensure t
       :hook (yaml-mode . origami-mode)
       :bind (("C-c C-z" . origami-toggle-node)
              ("C-c z" . origami-toggle-node)))
   #+end_src
** TODO Rebox2
   Look into this! Might be nice for creating boxes.
** TODO Writegood-mode or Artbollocks
   Nice modes for helping with writing correctly.
* Email
** Mu4e
   #+begin_src emacs-lisp :tangle yes
     (use-package mu4e
       :ensure nil
       :custom ((mu4e-view-date-format "%F %T")
                (mu4e-headers-date-format "%F")
                (mu4e-change-filenames-when-moving t)
                (mu4e-compose-signature
                 (with-temp-buffer
                   (insert-file-contents-literally "~/.email-signature/signature")
                   (buffer-substring-no-properties (point-min) (point-max))))))
   #+end_src
*** Account specific customizations
     The following settings are account specific, but can be set
     permanently with =customize=. Example:
   #+begin_src emacs-lisp :tangle no
     (setq mu4e-maildir "/path/to/mailbox"
           mu4e-sent-folder "/Sent Items"
           mu4e-trash-folder "/Deleted Items"
           mu4e-drafts-folder "/Drafts"
           mu4e-get-mail-command "mbsync work")
   #+end_src
** SMTP Setup
     Since the settings are mostly private, here is an example:
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq user-mail-address "my@mail.tld"
           user-full-name "My Name"
           smtpmail-smtp-user "my@mail.tld"  ; Depending on provider
           smtpmail-smtp-server "smtp.office365.com" ; For office 365
           smtpmail-smtp-service 587 ; For office 365
           smtpmail-stream-type 'starttls ; For office 365
           smtpmail-debug-info t
           auth-sources '("secrets:Login"))
   #+END_SRC
   These can be set permanently using the =customize= interface.
* Personal Customizations
  Some hacks I often use.

** ANSI Color region
  #+begin_src emacs-lisp :tangle yes
    (defun ansi-color-region (begin end)
      "Add color to a region with ansi color codes in it."
      (interactive "r")
      (ansi-color-apply-on-region
       (or begin (point-min))
       (or end (point-max))))
  #+end_src
** Kill Filename and Linenumber
  #+begin_src emacs-lisp :tangle yes
    (defun kill-filename-and-linenumber ()
      "Kill filename:linenumber pair of current position."
      (interactive)
      (kill-new
       (format "%s:%d"
               (buffer-file-name)
               (line-number-at-pos))))
  #+end_src
** Custom file
   Load this as late as possible, to ensure everything that will be
   customized, can be customized.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq custom-file "~/.emacs-custom")
     (load custom-file 'noerror)
   #+END_SRC
