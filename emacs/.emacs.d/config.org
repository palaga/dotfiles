* Introduction
** Why org mode
   Self documenting configuration, yay!

   As far as I know, Emacs 24.0 and up supports org-mode out of the
   box. Org-mode is great to organize stuff in plain text.

   With just a few lines of elisp in the [[../.emacs][.emacs]] file, we can extract
   the elisp code from this org-mode file (also known as tangling),
   compile and execute it. The next time Emacs is opened, it detects
   the config.elc file and tries to load it, but only if it's newer
   than the config.org file. So, org makes it easy to document the
   configuration file, while still keeping it fast to load.
* Package Configuration
  Packages should be installed and loaded in a modular and reliable
  way... Enter /use-package/! It allows for easy package loading and
  configuration!
  #+begin_src emacs-lisp :tangle yes
    (require 'package)

    (eval-and-compile
      (package-initialize)
      (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                               ("org" . "https://orgmode.org/elpa/")
                               ("melpa" . "https://melpa.org/packages/"))))

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (require 'use-package)
    (eval-when-compile
      (unless (boundp 'package-archive-content)
        (when (y-or-n-p "Update package list?")
          (package-refresh-contents))))
  #+end_src
  =package-initialize= is executed in a =eval-and-compile= block to
  ensure that it is loaded properly compile time. Also add a general
  elisp directory to our path, in order to experiment!
  #+begin_src emacs-lisp :tangle yes
    (eval-and-compile (add-to-list 'load-path "~/.emacs.d/elisp/"))
  #+end_src
* Auto-Compile
  Auto compile everything on load, in order to speed up future loads.
  #+begin_src emacs-lisp :tangle yes
    (use-package auto-compile
      :ensure t
      :config
      (progn
        (auto-compile-on-load-mode)
        (setq load-prefer-newer t)))
  #+end_src
* General Configuration
** Emacs Server
   I use emacsclient to edit files from the terminal. However, the
   server must be running before emacsclient can be used:
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'after-init-hook 'server-start)
   #+end_src
** Visual Appearance
   Now that we have the packages configured, we want to clean up the
   visual appearances of emacs. Lets cut down on the bars and what
   not.
   #+begin_src emacs-lisp :tangle yes
     (setq inhibit-splash-screen t)          ; Disable splash screen
     (setq inhibit-startup-message t)        ; Disable startup message

     (when window-system
       (scroll-bar-mode -1)                  ; Disable scroll bars
       (tool-bar-mode -1)                    ; Disable tool bar
       (menu-bar-mode -1))                   ; Disable menu bar

     (column-number-mode 1)                  ; Add column number to mode-line
     (setq use-dialog-box nil)               ; Do not use dialog boxes
     (global-linum-mode 1)                   ; Enable line number
     (global-hl-line-mode 1)                 ; Highlight line of the cursor
     (setq echo-keystrokes 0.1)              ; Lower the time to show keystrokes

     (use-package hl-line
       :config
       (set-face-background                  ; Set the color of the
        hl-line-face "gray16"))              ; highlight bar
   #+end_src
** Key bindings
   Some simple key bindings, to make life easier. These should be
   self-explanatory.
   #+begin_src emacs-lisp :tangle yes
     (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
     (global-set-key (kbd "C--") 'text-scale-decrease)
     (global-set-key (kbd "C-+") 'text-scale-increase)
     (global-set-key (kbd "RET") 'newline-and-indent)
     (global-set-key (kbd "M-\\") 'hippie-expand)
     (global-set-key (kbd "M-[") 'align)
   #+end_src
** Increment numbers
   Got this script from the [[http://www.emacswiki.org/emacs/IncrementNumber][emacswiki]]. It increments (or decrements) a
   number under point. This function is bound to =C-c i=.
   #+begin_src emacs-lisp :tangle yes
     (defun my/increment-number-decimal (&optional arg)
       "Increment the number forward from point by 'arg'."
       (interactive "p*")
       (save-excursion
         (save-match-data
           (let (inc-by field-width answer)
             (setq inc-by (if arg arg 1))
             (skip-chars-backward "0123456789")
             (when (re-search-forward "[0-9]+" nil t)
               (setq field-width (- (match-end 0) (match-beginning 0)))
               (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
               (when (< answer 0)
                 (setq answer (+ (expt 10 field-width) answer)))
               (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                      answer)))))))

     (global-set-key (kbd "C-c i") 'my/increment-number-decimal)
   #+end_src
** Configure yes-or-no-p
   Disable annoying /enter yes or no/ questions and replace them
   with a simple /enter y or n/ question.
   #+begin_src emacs-lisp :tangle yes
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Exit question
   I don't like it when I hit C-x C-c on accident and I'm thrown out
   of Emacs. Emacs should always ask me whether I want to exit or not!
   #+begin_src emacs-lisp :tangle yes
     (setq confirm-kill-emacs 'yes-or-no-p)
   #+end_src
** Electric pairs
   Electric pair mode rocks for most modes, so its on by default. It
   automatically closes an opening bracket or quote. When a piece of
   text is selected, it will wrap the text in the given pair. This
   makes many programming tasks a joy!
   #+begin_src emacs-lisp :tangle yes
     (electric-pair-mode t)
     (show-paren-mode t)
     (setq electric-pair-preserve-balance t)
     (setq electric-pair-delete-adjacent-pairs t)
   #+end_src
** White spaces
   Here I configure my whitespace settings. I currently use softtabs
   consisting of 4 spaces. Line wrapping is turned of, since I find it
   confusing.
   #+begin_src emacs-lisp :tangle yes
     (use-package whitespace
       :diminish global-whitespace-mode
       :config
       (progn
         (global-whitespace-mode 1)
         (setq whitespace-style '(face trailing tabs))))

     (setq-default indent-tabs-mode nil)     ; Disable tab
     (setq truncate-lines t)                 ; Disable line wrapping
     (setq tab-width 4)                      ; Set tab width to 4 spaces
   #+end_src
** Fill column
   Text should stay within 80 columns. This should be true for both
   text documents, as well as comments in source code.
   #+begin_src emacs-lisp :tangle yes
     (dolist (hook '(text-mode-hook prog-mode-hook))
       (add-hook hook 'auto-fill-mode))
     (setq fill-column 80)
     (setq fill-indent-according-to-mode t)
   #+end_src
   #+begin_src emacs-lisp :tangle yes
     (use-package newcomment
       :config (setq comment-auto-fill-only-comments t))
   #+end_src
** Browser Configuration
   Set the default browser to firefox.
   #+begin_src emacs-lisp :tangle yes
     (setq browse-url-browser-function 'browse-url-generic
           browse-url-generic-program "firefox")
   #+end_src
** Spell Checker Configuration
   Enable =flyspell-mode= for normal text files.
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'text-mode-hook 'flyspell-mode)
   #+end_src
   And enable the spell checker for comments, while programming.
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'prog-mode-hook 'flyspell-prog-mode)
   #+end_src
** Backups
   Save up to 6 new versions and two old versions in a dedicated
   backup directory. Better safe than sorry.
   #+begin_src emacs-lisp :tangle yes
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
     (setq version-control t)           ; Save versions of our backup files
     (setq delete-old-versions t)       ; Do not ask me whether I want to
                                        ; delete old backups
     (setq vc-make-backup-files t)      ; Prevent loss of contents in
                                        ; uncommitted files
     (setq kept-new-versions 6)
     (setq kept-old-versions 2)
   #+end_src
** History
   Keep the history of our actions. I have set the maximum number of
   history entries to 1000.
   #+begin_src emacs-lisp :tangle yes
     (savehist-mode 1)
     (setq history-length 1000)
     (setq history-delete-duplicates t)
     (setq savehist-save-minibuffer-history t)
     (setq savehist-additional-variables '(compile-command
                                           killring
                                           search-ring
                                           regexp-search-ring))
   #+end_src
** Projectile
   Easy project management with =C-c p= as prefix.
   #+begin_src emacs-lisp :tangle yes
     (use-package projectile
       :ensure t
       :init (projectile-mode))
   #+end_src
** Helm Mode
   Using Helm for most completion tasks. It replaces Ido and Smex.
   #+begin_src emacs-lisp :tangle yes
     (use-package helm
       :ensure t
       :bind (("M-x"     . helm-M-x)
              ("C-x a"   . helm-apt)
              ("C-x C-f" . helm-find-files)
              ("C-x C-b" . helm-buffers-list))
       :init (progn
               (helm-mode)))
   #+end_src
*** Helm ag
   #+begin_src emacs-lisp :tangle yes
     (use-package helm-ag
       :ensure t
       :bind   ("C-c p g" . helm-do-ag-project-root))
   #+end_src
*** Helm Swiper
    #+begin_src emacs-lisp :tangle yes
      (use-package swiper-helm
                   :ensure t
                   :bind ("M-i" . swiper-helm))
    #+end_src
*** Helm Flycheck
    #+begin_src emacs-lisp :tangle yes
      (use-package helm-flycheck
                   :ensure t
                   :bind ("C-c ! h" . helm-flycheck))
    #+end_src
*** Helm Projectile
    #+begin_src emacs-lisp :tangle yes
      (use-package helm-projectile
        :ensure t
        :bind (("C-c p p" . helm-projectile-switch-project)
               ("C-c p f" . helm-projectile-find-file-dwim)
               ("C-c p F" . helm-projectile-find-file-in-known-projects)))
    #+end_src
*** Helm Yasnippet
    #+begin_src emacs-lisp :tangle yes
      (use-package helm-c-yasnippet
        :ensure t)
    #+end_src
*** Helm Tramp
    #+begin_src emacs-lisp :tangle yes
      (use-package helm-tramp
        :ensure t
        :bind ("C-x t" . helm-tramp))
    #+end_src
** Dired and Dired-x Configuration
   Some basic config for dired and dired-x.
   #+begin_src emacs-lisp :tangle yes
     (use-package dired-x
       :config (dired-omit-mode 1))

     (use-package dired
       :config
       (progn
         (put 'dired-find-alternate-file 'disabled nil)
         (setq dired-dwim-target t)))
   #+end_src
** EditorConfig
   Editor config helps to configure your editor, independent of the
   exact editor you use. This is used for projects where developers
   choose their own editor, but want consistent settings for the
   projects they collaborate on.
   #+begin_src emacs-lisp :tangle yes
     (use-package editorconfig
       :ensure t
       :config (editorconfig-mode 1))
   #+end_src
* Theme Configuration
  Zenburn! Gotta love it..
  #+begin_src emacs-lisp :tangle yes
    (use-package zenburn-theme
      :ensure t
      :config (load-theme 'zenburn t))
  #+end_src
* Languages Modes
  Here you will find the configuration for some of the languages I
  use. The configurations for each language can be found under its own
  header.

  For all the languages I use, I want to see in which function I
  currently am:
  #+begin_src emacs-lisp :tangle yes
    (add-hook 'prog-mode-hook 'which-function-mode)
  #+end_src
** Go
   #+begin_src emacs-lisp :tangle yes
     (use-package go-mode
       :ensure t
       :config
       (add-hook 'go-mode-hook
                 (lambda ()
                   (setq whitespace-style '(face trailing))
                   (setq tab-width 2))))
   #+end_src
** Java
   All configuration regarding Java goes here.
*** General Configuration
    Put our buffer in subword mode when Java is loaded. Subword mode
    allows us to edit CamelCase identifiers easily.
    #+begin_src emacs-lisp :tangle yes
      (add-hook 'java-mode-hook 'subword-mode)
    #+end_src
*** TODO Eclim Configuration
   Some eclim configuration. Does nothing yet. Not sure whether I want
   to use this.
   #+begin_src emacs-lisp :tangle yes
     ;; (require 'eclim)
     ;; (require 'eclimd)

     ;; (global-eclim-mode)

     ;; (custom-set-variables
     ;;  '(eclim-eclipse-dirs '("~/.opt/eclipse_luna/"))
     ;;  '(eclim-executable "~/.opt/eclipse_luna/eclim"))
   #+end_src
*** Groovy
    #+begin_src emacs-lisp :tangle yes
      (use-package groovy-mode
        :ensure t
        :config
        (progn
          (setq groovy-indent-offset 2)
          (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
          (add-to-list 'auto-mode-alist '("\.gradle$" . groovy-mode))))
    #+end_src
*** Gradle Configuration
    #+begin_src emacs-lisp :tangle yes
      (use-package gradle-mode
        :ensure t)
    #+end_src
*** Ant Configuration
    Ant mode makes it easier to call ant from Emacs.
    #+begin_src emacs-lisp :tangle yes
      (use-package ant
        :ensure t)
    #+end_src
** Lisps
*** General
**** Paredit
     Configure paredit mode for all the lisp dialects. This is a must
     for lisp development of any kind.
     #+begin_src emacs-lisp :tangle yes
       (use-package paredit
         :ensure t
         :config
         (dolist
             (hook '(emacs-lisp-mode-hook
                     eval-expression-minibuffer-setup-hook
                     ielm-mode-hook
                     lisp-mode-hook
                     clojure-mode-hook
                     lisp-interaction-mode-hook
                     scheme-mode-hook))
           (add-hook hook 'enable-paredit-mode)))
     #+end_src
*** TODO Emacs Lisp
*** Clojure
    Make sure that Cider is installed, for interactive clojure development.
    #+begin_src emacs-lisp :tangle yes
      (use-package cider
        :ensure t)
    #+end_src
*** TODO Common Lisp
*** Schemes
    Make sure that Geiser is installed, for interactive scheme development.
    #+begin_src emacs-lisp :tangle yes
      (use-package geiser
        :ensure t)
    #+end_src
** Python
*** Elpy
    I'm using elpy for my python IDE needs. Elpy uses =rope= and
    =jedi= for completion, =pyflakes= for checking stuff and
    =importmagic= for automatic imports. These can be installed with
    =pip install rope jedi pyflake importmagics=.
    #+begin_src emacs-lisp :tangle yes
      (use-package elpy
        :ensure t
        :init (elpy-enable))
    #+end_src
*** Pyvenv
    Useful for working with virtual environments.
    #+begin_src emacs-lisp :tangle yes
      (use-package pyvenv
        :ensure t)
    #+end_src
** Jinja2
   #+begin_src emacs-lisp :tangle yes
     (use-package jinja2-mode
       :ensure t
       :init
       (add-to-list 'auto-mode-alist '("\.j2$" . jinja2-mode)))
   #+end_src
** C/C++
   Activate the =xcscope= package, to easily navigate C/C++ code.
   #+begin_src emacs-lisp :tangle yes
     (use-package xcscope
       :ensure t
       :init (cscope-setup))
   #+end_src
* Markup Modes
** Markdown
   Make sure markdown mode is there, if needed.
   #+begin_src emacs-lisp :tangle yes
     (use-package markdown-mode
       :ensure t)
   #+end_src
** Org Mode
   Must have! Make sure org-mode is installed, up-to-date and
   configured to my needs.
   #+begin_src emacs-lisp :tangle yes
     (use-package org
       :ensure t
       :bind ("C-c c" . org-capture)
       :config
       (setq org-directory "~/org"
             org-default-notes-file (concat org-directory "/notes.org")
             org-agenda-files '("~/org/")
             org-capture-templates '(("t" "TODO"
                                      entry (file+headline
                                             "~/org/todo.org"
                                             "Tasks")
                                      "* TODO %?\n  %i %F")))
       :init
       (progn
         (org-babel-do-load-languages
          'org-babel-load-languages
          '((dot      . t)
            (ditaa    . t)
            (python   . t)
            (R        . t)
            (latex    . t)
            (makefile . t)
            (sh       . t)))

         ;; Ensure that the beamer exporter is available
         (require 'ox-beamer)))
   #+end_src

   Install necessary export libraries:

   #+begin_src emacs-lisp :tangle yes
     (use-package ox-reveal
       :ensure t)
   #+end_src
*** Org Bullets
    #+begin_src emacs-lisp :tangle yes
      (use-package org-bullets
        :ensure t
        :init (add-hook 'org-mode-hook
                        (lambda ()
                          (org-bullets-mode 1))))
    #+end_src
** Yaml
   Add yaml mode, for use in all yaml related project (ansible,
   docker-compose, etc).
   #+begin_src emacs-lisp :tangle yes
     (use-package yaml-mode
       :ensure t)
   #+END_SRC
** Latex
   Make sure =auctex= is installed, for Latex development. (=tex-site=
   seems to be the package for =auctex=)
   #+begin_src emacs-lisp :tangle yes
     (use-package tex-site
       :ensure auctex)
   #+end_src
** Graphviz
   Ensure graphviz dot mode is installed, for creating graphviz diagrams.
   #+begin_src emacs-lisp :tangle yes
     (use-package graphviz-dot-mode
       :ensure t)
   #+end_src
* Framework Modes
  Configuration for frameworks, such as docker, ansible, etc. is done
  here.
** Docker
*** Docker
    Enable Docker management through emacs.
    #+begin_src emacs-lisp :tangle yes
      (use-package docker
        :ensure t)
    #+end_src
*** Dockerfiles
    Enable highlighting for Dockerfiles.
    #+begin_src emacs-lisp :tangle yes
      (use-package dockerfile-mode
        :ensure t)

      (use-package docker-compose-mode
        :ensure t)
    #+end_src
** Ansible
   Enable ansible documentation hook, under C-c ?.
   #+begin_src emacs-lisp :tangle yes
     (use-package ansible-doc
       :ensure t
       :init (add-hook 'yaml-mode-hook 'ansible-doc-mode))
   #+end_src
** Terraform
   Enable terraform mode!
   #+begin_src emacs-lisp :tangle yes
     (use-package terraform-mode
       :ensure t)
   #+end_src
* Web development related
** Web-mode
   Added web-mode to be able to edit javascript with Javascript major
   mode in a HTML file. Works out of the box.
   #+begin_src emacs-lisp :tangle yes
     (use-package web-mode
       :ensure t
       :defer t
       :init (add-to-list 'auto-mode-alist '("\\.html?" . web-mode)))
   #+end_src
* Other Modes
** Fill Column Indicator
   #+begin_src emacs-lisp :tangle yes
     (use-package fill-column-indicator
       :ensure t
       :config (progn
                 (add-hook 'text-mode-hook 'fci-mode)
                 (add-hook 'prog-mode-hook 'fci-mode)
                 (setq fci-rule-column 80)))
   #+end_src
** Expand Region
   Expand region increases the selected region by semantic units.
   #+begin_src emacs-lisp :tangle yes
     (use-package expand-region
       :ensure t
       :bind ("C-=" . er/expand-region))
   #+end_src
** Flycheck Mode
   Awesome mode to automatically run syntax checkers over the source
   code in idle-time. Currently, only C and Python are configured.
   #+begin_src emacs-lisp :tangle yes
     (use-package flycheck
       :ensure t
       :config
       (progn
         (add-hook 'c-mode-hook
                   (lambda ()
                     (flycheck-mode)
                     (flycheck-list-errors)))
         (add-hook 'c++-mode-hook
                   (lambda ()
                     (flycheck-mode)
                     (flycheck-list-errors)))
         (add-hook 'js-mode-hook
                   (lambda ()
                     (flycheck-select-checker 'jshint)))
         (add-hook 'python-mode-hook
                   (lambda ()
                     (flycheck-select-checker 'python-flake8)
                     (flycheck-mode)))))
   #+end_src
** Org-Jira
   #+begin_src emacs-lisp :tangle yes
     (use-package org-jira
       :ensure t
       :bind ("C-c j c" . org-jira-create-issue))
   #+end_src
** Magit Mode
   Awesome git mode. Must have to control git from Emacs.
   #+begin_src emacs-lisp :tangle yes
     (use-package magit
       :ensure t
       :bind (("C-c g" . magit-status))
       :config
       (progn
         (setq magit-last-seen-setup-instructions "1.4.0")
         (setq magit-auto-revert-mode nil)))
   #+end_src
** Company Mode
   Company mode provides auto completion for my setup. Company works
   out of the box. Back-ends can be configured using the
   =company-backends= list, but has a sane default.
   #+begin_src emacs-lisp :tangle yes
     (use-package company
       :ensure t
       :init (global-company-mode)
       :diminish company-mode)
   #+end_src
   The tab completion functionality might clash with yasnippet. The
   following code (from [[http://www.emacswiki.org/emacs/CompanyMode]])
   resolves the issue.
   #+begin_src emacs-lisp :tangle yes
     (defun check-expansion ()
       (save-excursion
         (if (looking-at "\\_>") t
           (backward-char 1)
           (if (looking-at "\\.") t
             (backward-char 1)
             (if (looking-at "->") t nil)))))

     (defun do-yas-expand ()
       (let ((yas/fallback-behavior 'return-nil))
         (yas/expand)))

     (defun tab-indent-or-complete ()
       (interactive)
       (if (minibufferp)
           (minibuffer-complete)
         (if (or (not yas/minor-mode)
                 (null (do-yas-expand)))
             (if (check-expansion)
                 (company-complete-common)
               (indent-for-tab-command)))))


     (with-eval-after-load 'company
       (define-key company-active-map "\t" 'tab-indent-or-complete))
   #+end_src
** Yasnippet Mode
   Snippets, yay!
   #+begin_src emacs-lisp :tangle yes
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :bind (("C-c y c" . helm-yas-complete))
       :config
       (progn
         (dolist
             (hook '(python-mode-hook
                     emacs-lisp-mode-hook
                     org-mode-hook
                     java-mode-hook
                     go-mode-hook
                     c++-mode-hook
                     c-mode-hook))
           (add-hook hook 'yas-minor-mode))

         (let ((my/snippets-dir "~/.emacs.d/snippets"))
           (setq yas-snippet-dirs (list my/snippets-dir))
           (setq yas/root-directory my/snippets-dir)
           (yas-load-directory yas/root-directory))))
   #+end_src
   The defaults are OK, but it gets better with the snippets library
   from [[https://github.com/AndreaCrotti/yasnippet-snippets.git][Andrea Crotti]]. No need to clone them manually anymore.
   #+begin_src emacs-lisp :tangle yes
     (use-package yasnippet-snippets
       :ensure t)
   #+end_src
** CEDET
   Basic CEDET configuration.
   #+begin_src emacs-lisp :tangle yes
     (use-package cedet
       :config
       (progn
         (semantic-mode 1)
         (setq semantic-default-submodes
               '(global-semanticdb-minor-mode
                 global-semantic-idle-scheduler-mode
                 global-semantic-idle-summary-mode
                 global-semantic-idle-local-symbol-highlight-mode))))
   #+end_src
*** Sr-Speedbar
    The key binding for speedbar does not work yet. Fix this!
    #+begin_src emacs-lisp :tangle yes
      (defun my/sr-speedbar-toggle ()
        "Toggle sr-speedbar and set focus to it."
        (interactive)
        (sr-speedbar-toggle)
        (when (sr-speedbar-exist-p)
          (sr-speedbar-select-window)))

      (use-package sr-speedbar
        :ensure t
        :bind ("<f6>" . my/sr-speedbar-toggle))
    #+end_src
** TODO Smartpair Mode
   Could replace my electric pair config. Should be configured
   correctly.
   #+begin_src emacs-lisp :tangle yes
     (use-package smartparens
       :ensure t
       :init (smartparens-mode))
   #+end_src
** TODO Ace-mode
   Awesome mode to jump quickly to a specific point in one of the
   visible buffers.
   #+begin_src emacs-lisp :tangle yes
     (use-package ace-jump-mode
       :ensure t
       :bind ("C-c SPC" . ace-jump-mode))
   #+end_src
** TODO Origami mode
   #+begin_src emacs-lisp :tangle yes
     (use-package origami
       :ensure t)
   #+end_src
** TODO Rebox2
   Look into this! Might be nice for creating boxes.
** TODO Writegood-mode or Artbollocks
   Nice modes for helping with writing correctly.
